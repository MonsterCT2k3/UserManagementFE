@page "/login"
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using UserManagementFE.Services
@using UserManagementFE.Utils
@using System.Text
@using System.Text.Json
@using System

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background: #f8f9fa; /* Nền sáng giống trong hình */
    }

    .login-card {
        background: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 450px; /* Chiều rộng form */
    }

        .login-card h3 {
            text-align: center;
            margin-bottom: 1.5rem;
            color: #333;
            font-weight: bold;
        }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-control {
        border-radius: 5px;
        border: 1px solid #ced4da;
        padding: 0.75rem;
        width: 100%;
    }

    .btn-primary {
        width: 100%;
        padding: 0.75rem;
        border-radius: 5px;
        background-color: #007bff;
        border: none;
        font-weight: bold;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .alert {
        margin-top: 1rem;
    }

    .register-link {
        text-align: center;
        margin-top: 1rem;
    }

        .register-link a {
            color: #007bff;
            text-decoration: none;
        }

            .register-link a:hover {
                text-decoration: underline;
            }
</style>

<div class="login-container">
    <div class="login-card">
        <h3>Đăng nhập</h3>
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Tên đăng nhập:</label>
                <InputText class="form-control" @bind-Value="loginModel.Username" />
                <ValidationMessage For="@(() => loginModel.Username)" />
            </div>
            <div class="form-group">
                <label>Mật khẩu:</label>
                <InputText type="password" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Đăng nhập</button>
            <div class="register-link">
                <p>Chưa có tài khoản? <a href="/register">Đăng ký ngay</a></p>
            </div>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        try
        {
            loginModel.Username = loginModel.Username.Trim();
            loginModel.Password = loginModel.Password.Trim();
            Console.WriteLine("Username: " + loginModel.Username);
            Console.WriteLine("Password: " + loginModel.Password);


            // Gọi API đăng nhập
            var response = await AuthService.LoginAsync(loginModel);
            if (response == null || string.IsNullOrEmpty(response))
            {
                throw new Exception("Không thể lấy token từ server.");
            }
            if(response == "Admin")
            {
                Navigation.NavigateTo("/admin");
            }else
			{
				Navigation.NavigateTo("/profile");
			}



            // var tokenResponse = JsonSerializer.Deserialize<TokenResponse>(response);
            // if (tokenResponse == null || string.IsNullOrEmpty(tokenResponse.token))
            // {
            //     throw new Exception("Không thể lấy token từ server.");
            // }

            // // Lưu token vào local storage
            // await JS.InvokeVoidAsync("localStorage.setItem", "authToken", tokenResponse.token);

            // Chuyển hướng đến trang profile
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private class TokenResponse
    {
        public string token { get; set; } = string.Empty;
    }
}