@page "/edit-profile"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS

<div class="form-container">
    <h3 class="text-center mb-4">Chỉnh sửa thông tin</h3>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }

    @if (user == null)
    {
        <p>Đang tải...</p>
    }
    else
    {
        <EditForm Model="user" OnValidSubmit="UpdateAsync">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Số điện thoại:</label>
                <InputText class="form-control" @bind-Value="user.Sdt" />
                <ValidationMessage For="@(() => user.Sdt)" />
            </div>
            <div class="form-group">
                <label>Email:</label>
                <InputText class="form-control" @bind-Value="user.Email" />
            </div>
            <div class="form-group">
                <label>Địa chỉ tạm trú:</label>
                <InputText class="form-control" @bind-Value="user.DiaChiTamTru" />
            </div>
            <div class="form-group">
                <label>Nghề nghiệp:</label>
                <InputText class="form-control" @bind-Value="user.NgheNghiep" />
            </div>
            <div class="form-group">
                <label>Số tài khoản ngân hàng:</label>
                <InputText class="form-control" @bind-Value="user.SoTkNganHang" />
            </div>
            <div class="d-flex justify-content-between">
                <button type="submit" class="btn btn-primary">Cập nhật</button>
                <button class="btn btn-secondary" @onclick="NavigateToProfile">Quay lại</button>
            </div>
        </EditForm>
    }
</div>

@code {
    private User? user;
    private string ErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "token");
            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            user = await Http.GetFromJsonAsync<User>("api/user/profile");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Lỗi: {ex.Message}";
        }
    }

    private async Task UpdateAsync()
    {
        try
        {
            if (user == null) return;
            var response = await Http.PutAsJsonAsync("api/user/update", user);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/profile");
            }
            else
            {
                ErrorMessage = "Cập nhật thất bại. Vui lòng thử lại.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Lỗi: {ex.Message}";
        }
    }

    private void NavigateToProfile()
    {
        Navigation.NavigateTo("/profile");
    }
}